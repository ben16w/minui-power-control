#!/bin/sh
BIN_DIR="$(dirname "$0")"

architecture=arm
if uname -m | grep -q '64'; then
    architecture=arm64
fi

export PATH="$BIN_DIR/$architecture:$BIN_DIR/$PLATFORM:$BIN_DIR:$PATH"

print_usage() {
    echo "Usage: $0 <emulator-binary>"
    echo "If no emulator binary is specified, a dummy PID file will be created."
}

cleanup() {
    echo "Cleaning up minui-power-control..."
    if [ -n "$HANDLER_PROCESS_PID" ]; then
        echo "Cleaning up button-handler process with PID: $HANDLER_PROCESS_PID"
        kill "$HANDLER_PROCESS_PID" || true
        wait "$HANDLER_PROCESS_PID" || true
    fi
    rm -f /tmp/powercontrol-emulator-pid
    rm -f /tmp/powercontrol-dummy-pid
}

main() {
    trap "cleanup" EXIT INT TERM HUP QUIT

    echo "Starting minui-power-control..."

    if [ "$PLATFORM" = "tg3040" ] && [ -z "$DEVICE" ]; then
        export DEVICE="brick"
        export PLATFORM="tg5040"
    fi

    if [ "$PLATFORM" = "miyoomini" ] && [ -z "$DEVICE" ]; then
        export DEVICE="miyoomini"
        if [ -f /customer/app/axp_test ]; then
            export DEVICE="miyoominiplus"
        fi
    fi

    allowed_platforms="tg5040 rg35xxplus miyoomini"
    if ! echo "$allowed_platforms" | grep -q "$PLATFORM"; then
        echo "$PLATFORM is not a supported platform."
        exit 1
    fi

    if ! command -v minui-presenter >/dev/null 2>&1; then
        echo "minui-presenter binary not found."
        exit 1
    fi

    if ! command -v button-handler >/dev/null 2>&1; then
        echo "button-handler binary not found."
        exit 1
    fi

    if [ ! -f "$BIN_DIR/shutdown" ]; then
        echo "shutdown script not found."
        exit 1
    fi

    if [ ! -f "$BIN_DIR/suspend" ]; then
        echo "suspend script not found."
        exit 1
    fi

    chmod +x "$BIN_DIR/$PLATFORM/minui-presenter"
    chmod +x "$BIN_DIR/$architecture/button-handler"
    chmod +x "$BIN_DIR/shutdown"
    chmod +x "$BIN_DIR/suspend"

    if [ "$#" -eq 0 ]; then
        echo "Emulator process not specified. Creating a dummy PID file."
        touch /tmp/powercontrol-dummy-pid
    elif [ "$#" -eq 1 ]; then
        EMULATOR_BIN="$1"
        EMULATOR_PROCESS_PID=""

        for _ in $(seq 1 10); do
            echo "Waiting for $EMULATOR_BIN to start..."
            EMULATOR_PROCESS_PID=$(pgrep "$EMULATOR_BIN" | head -n 1)
            if [ -n "$EMULATOR_PROCESS_PID" ] && kill -0 "$EMULATOR_PROCESS_PID" 2>/dev/null; then
                break
            fi
            sleep 1
        done

        if [ -z "$EMULATOR_PROCESS_PID" ] || ! kill -0 "$EMULATOR_PROCESS_PID" 2>/dev/null; then
            echo "Emulator process $EMULATOR_BIN not found."
            exit 1
        fi

        echo "$EMULATOR_PROCESS_PID" > /tmp/powercontrol-emulator-pid
        echo "Emulator PID: $EMULATOR_PROCESS_PID"
    else
        print_usage
    fi

    echo "Starting button-handler..."
    button-handler &
    HANDLER_PROCESS_PID=$!

    if [ -n "$EMULATOR_PROCESS_PID" ]; then
        echo "Waiting for emulator process $EMULATOR_PROCESS_PID to finish..."
        while kill -0 "$EMULATOR_PROCESS_PID" 2>/dev/null; do
            sleep 1
        done
    else
        echo "Waiting for dummy PID file to be removed..."
        while [ -f /tmp/powercontrol-dummy-pid ]; do
            sleep 1
        done
    fi
}

main "$@"